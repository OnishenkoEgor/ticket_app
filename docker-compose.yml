version: '3.7'
services:
  nginx:
    image: nginx:latest
    volumes:
      - ./ticket-app:/var/www
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - app
    ports:
      - "8080:80"
      - "443:443"
      - "5173:5173"
    container_name: nginx
    networks:
      - app-network
  app:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    tty: true
    environment:
      - APP_URL=localhost:9000
    volumes:
      - ./ticket-app:/var/www
      - ./entrypoints/entrypoint.sh:/var/tmp/entrypoint.sh:ro
      - ./log:/var/log/nginx
    depends_on:
      - db
    entrypoint: /var/tmp/entrypoint.sh
    container_name: app
    healthcheck:
      test: curl --fail nginx || exit 1
      interval: 30s
      retries: 30
    expose:
      - 9000
    networks:
      - app-network
  app-queue:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    tty: true
    environment:
      - APP_URL=localhost:9000
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./ticket-app:/var/www
      - ./entrypoints/queue-entrypoint.sh:/var/tmp/queue-entrypoint.sh:ro
      - ./log:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
        restart: true
    entrypoint: /var/tmp/queue-entrypoint.sh
    container_name: app-queue
    networks:
      - app-network
  app-scheduler:
    build:
      context: .
      dockerfile: .docker/Dockerfile
    tty: true
    environment:
      - APP_URL=localhost:9000
    volumes:
      - ./ticket-app:/var/www
      - ./entrypoints/scheduler-entrypoint.sh:/var/tmp/scheduler-entrypoint.sh:ro
      - ./log:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
        restart: true
    entrypoint: /var/tmp/scheduler-entrypoint.sh
    container_name: app-scheduler
    networks:
      - app-network
  app-node:
    build:
      context: .
      dockerfile: .docker/node.Dockerfile
    environment:
      - APP_URL=localhost:9000
    ports:
      - "80:3000"
    volumes:
      - ./ticket-app:/var/www/
      - ./entrypoints/node-entrypoint.sh:/var/tmp/node-entrypoint.sh:ro
    entrypoint: /var/tmp/node-entrypoint.sh
    container_name: app-node
    networks:
      - app-network
  db:
    image: postgres:15.3
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: app
    expose:
      - 5432
    ports:
      - "5432:5432"
    container_name: db
    networks:
      - app-network
  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network
  kafka:
    image: &kafka-image bitnami/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list" ]
      start_period: 15s
      interval: 10s
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - app-network
#  init-kafka:
#    image: *kafka-image
#    working_dir: /opt/bitnami/kafka/bin
#    entrypoint: /bin/bash
#    depends_on:
#      kafka:
#        condition: service_healthy
#    command: |
#      kafka-topics.sh --create --if-not-exists --topic foo --replication-factor=1 --partitions=3 --bootstrap-server kafka:9092
#    networks:
#      - app-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    container_name: kafka-ui
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    networks:
      - app-network
  rabbitmq:
    image: rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    networks:
      - app-network
volumes:
  kafka_data:
    driver: local
networks:
  app-network:
    driver: bridge
